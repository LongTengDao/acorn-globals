{
	"version":
		3,
	"file":
		"index.js",
	"sourceRoot":
		"../../src/",
	"sources":
		["version?text","scope.ts","DECLARATION_VISITORS.ts","ReferenceVisitors.ts","default.ts"],
	"sourcesContent":
		[
			"export default '1.2.0';",
			"import WeakMap from '.WeakMap';\nimport Error from '.Error';\nimport Set from '.Set';\n\nconst SCOPE_NAMES                             = new WeakMap;\n\nlet scope_names                             = SCOPE_NAMES;\n\nexport function scope_new ()       {\n\tif ( scope_names!==SCOPE_NAMES  ) { throw Error(`Can't start new finding before previous finding finished.`); }\n\tscope_names = new WeakMap;\n}\n\nexport function scope_add (scope      , { name }            )       {\n\tlet names                          = scope_names.get(scope);\n\tif ( !names ) { scope_names.set(scope, names = new Set); }\n\tnames.add(name);\n}\n\nexport function scope_has (scope      , name        )          {\n\tconst names                          = scope_names.get(scope);\n\treturn names ? names.has(name) : false;\n}\n\nexport function scope_old ()       {\n\tscope_names = SCOPE_NAMES;\n}\n\n                                  \n\n                                              \n",
			"import Error from '.Error';\nimport freeze from '.Object.freeze';\nimport Null from '.null';\n\nimport { scope_add } from './scope';\n\nconst isVarScope = (type        )          =>\n\ttype==='FunctionDeclaration' ||\n\ttype==='FunctionExpression' ||\n\ttype==='ArrowFunctionExpression' ||\n\ttype==='Program';\n\nconst isAnyScope = (type        )          =>\n\ttype==='BlockStatement' ||\n\tisVarScope(type);\n\nfunction Pattern (node         , scope      )       {\n\tswitch ( node.type ) {\n\t\t\n\t\tcase 'Identifier':\n\t\t\tscope_add(scope, node);\n\t\t\tbreak;\n\t\t\n\t\tcase 'ObjectPattern':// { Pattern }\n\t\t\tfor ( let { properties } = node, { length } = properties, index         = 0; index<length; ++index ) {\n\t\t\t\tconst property = properties[index];\n\t\t\t\tswitch ( property.type ) {\n\t\t\t\t\tcase 'Property':// { key: valuePattern }\n\t\t\t\t\t\tPattern(property.value, scope);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'RestElement':// { ...argumentPattern }\n\t\t\t\t\t\tPattern(property.argument, scope);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow Error(`Unrecognized pattern type: ${property.type}`);\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\t\n\t\tcase 'ArrayPattern':// [ , Pattern ]\n\t\t\tfor ( let { elements } = node, { length } = elements, index         = 0; index<length; ++index ) {\n\t\t\t\tconst element = elements[index];\n\t\t\t\tif ( element ) { Pattern(element, scope); }\n\t\t\t}\n\t\t\tbreak;\n\t\t\n\t\tcase 'RestElement':// [ ...argumentPattern ] (...argumentPattern)\n\t\t\tPattern(node.argument, scope);\n\t\t\tbreak;\n\t\t\n\t\tcase 'AssignmentPattern':// leftPattern = right\n\t\t\tPattern(node.left, scope);\n\t\t\tbreak;\n\t\t\n\t\tdefault:\n\t\t\tthrow Error(`Unrecognized pattern type: ${node.type}`);\n\t\t\t\n\t}\n}\n\nfunction VariableDeclaration (node                     , parents        )       {\n\tconst isScope = node.kind==='var' ? isVarScope : isAnyScope;\n\tfor ( let index         = parents.length-1; index>=0; --index ) {\n\t\tconst parent = parents[index];\n\t\tif ( isScope(parent.type) ) {\n\t\t\tconst { declarations } = node;\n\t\t\tconst { length } = declarations;\n\t\t\tfor ( let index         = 0; index<length; ++index ) {\n\t\t\t\tPattern(declarations[index].id, parent);\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\nfunction FunctionDeclaration (node           , parents        )       {\n\tconst { id } = node;\n\tif ( id ) {\n\t\tfor ( let index         = parents.length-2; index>=0; --index ) {\n\t\t\tconst parent = parents[index];\n\t\t\tif ( isVarScope(parent.type) ) {\n\t\t\t\tscope_add(parent, id);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tFunction(node);\n}\n\nfunction Function (scope           )       {\n\tconst { params } = scope;\n\tconst { length } = params;\n\tfor ( let index         = 0; index<length; ++index ) {\n\t\tPattern(params[index], scope);\n\t}\n\tconst { id } = scope;\n\tif ( id ) { scope_add(scope, id); }\n}\n\nfunction ClassDeclaration (node        , parents        )       {\n\tconst { id } = node;\n\tif ( id ) {\n\t\tfor ( let index         = parents.length-2; index>=0; --index ) {\n\t\t\tconst parent = parents[index];\n\t\t\tif ( isAnyScope(parent.type) ) {\n\t\t\t\tscope_add(parent, id);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tClass(node);\n}\n\nfunction Class (scope        )       {\n\tconst { id } = scope;\n\tif ( id ) { scope_add(scope, id); }\n}\n\nfunction TryStatement ({ handler }              )       {\n\tif ( handler ) { Pattern(handler.param, handler); }\n}\n\nfunction Import$Specifier ({ local }                  , parents        )       {\n\tscope_add(parents[0], local);\n}\n\nexport default /*#__PURE__*/freeze(Null({\n\tVariableDeclaration,\n\tFunctionDeclaration,\n\tFunction,\n\tClassDeclaration,\n\tClass,\n\tTryStatement,\n\tImportSpecifier: Import$Specifier,\n\tImportDefaultSpecifier: Import$Specifier,\n\tImportNamespaceSpecifier: Import$Specifier,\n}));\n\n                                  \n\n                                        \n\n                                            \n\n                                      \n\n                                                                \n\n                                                  \n\n                                                          \n",
			"import Null from '.null';\n\nimport { scope_has } from './scope';\n\nconst isAutoScope = (type        )          =>\n\ttype==='FunctionExpression' ||\n\ttype==='FunctionDeclaration';\n\nexport default function ReferenceVisitors (globals                                                ) {\n\t\n\tfunction Identifier (node            , parents        )       {\n\t\tconst { name } = node;\n\t\tlet index         = parents.length;\n\t\tif ( name==='arguments' ) {\n\t\t\twhile ( index ) {\n\t\t\t\tconst parent = parents[--index];\n\t\t\t\tif ( scope_has(parent, name) || isAutoScope(parent.type) ) { return; }\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\twhile ( index ) {\n\t\t\t\tif ( scope_has(parents[--index], name) ) { return; }\n\t\t\t}\n\t\t}\n\t\tadd(globals, node, name);\n\t}\n\t\n\tfunction ThisExpression (node                , parents        )       {\n\t\tfor ( let index         = parents.length; index; ) {\n\t\t\tif ( isAutoScope(parents[--index].type) ) { return; }\n\t\t}\n\t\tadd(globals, node, 'this');\n\t}\n\t\n\treturn Null({\n\t\tIdentifier,// reference\n\t\tVariablePattern: Identifier,// definition\n\t\tThisExpression,\n\t});\n\t\n};\n\nfunction add (globals                                                , node                             , name        )       {\n\tconst nodes = globals.get(name);\n\tif ( nodes ) { nodes.push(node); }\n\telse { globals.set(name, [ node ]); }\n}\n\n                                  \n\n                                              \n\n                                                      \n",
			"import version from './version?text';\n\nimport Map from '.Map';\nimport push from '.Array.prototype.push';\nimport apply from '.Reflect.apply';\n\nimport { scope_new, scope_old } from './scope';\nimport DECLARATION_VISITORS from './DECLARATION_VISITORS';\nimport ReferenceVisitors from './ReferenceVisitors';\n\nconst { ancestor, base } = require('acorn-walk');\n\nif ( !base.FieldDefinition ) {\n\tbase.FieldDefinition = function (node                 , state_parents              , _continue                                                             )       {\n\t\tif ( node.computed ) { _continue(node.key, state_parents, 'Expression'); }\n\t\tconst { value } = node;\n\t\tif ( value ) { _continue(value, state_parents, 'Expression'); }\n\t};\n}\n\nclass Globals extends Map                                            {\n\tnames (             )           {\n\t\treturn [ ...this.keys() ];\n\t}\n\tnodes (             ) {\n\t\tconst nodes                                    = [];\n\t\tfor ( const value of this.values() ) {\n\t\t\tapply(push, nodes, value);\n\t\t}\n\t\treturn nodes;\n\t}\n}\n\nfunction findGlobals (AST      )          {\n\tscope_new();\n\ttry {\n\t\tconst globals          = new Globals;\n\t\tancestor(AST, DECLARATION_VISITORS);\n\t\tancestor(AST, ReferenceVisitors(globals));\n\t\treturn globals;\n\t}\n\tfinally { scope_old(); }\n}\n\nimport Default from '.default';\nexport default Default(findGlobals, { version });\n\n                                  \n                                                        \n                                              \n                                                      "
		],
	"names":
		[],
	"mappings":
		"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"
}