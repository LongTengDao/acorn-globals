{
	"version":
		3,
	"file":
		"index.js",
	"sourceRoot":
		"../../src/",
	"sources":
		["version?text","scope.ts","DeclarationVisitors.ts","ReferenceVisitors.ts","default.ts"],
	"sourcesContent":
		[
			"export default '1.0.2';",
			"import WeakMap from '.WeakMap';\nimport Error from '.Error';\nimport Set from '.Set';\n\nconst NODE_NAMES                             = new WeakMap;\nlet node_names                             = NODE_NAMES;\n\nexport function scope_new ()       {\n\tif ( node_names!==NODE_NAMES  ) { throw Error(`Can't start new finding before previous finding finished.`); }\n\tnode_names = new WeakMap;\n}\n\nexport function scope_add (scope      , { name }            )       {\n\tlet names                          = node_names.get(scope);\n\tif ( !names ) { node_names.set(scope, names = new Set); }\n\tnames.add(name);\n}\n\nexport function scope_has (scope      , name        )          {\n\tconst names                          = node_names.get(scope);\n\treturn names ? names.has(name) : false;\n}\n\nexport function scope_old ()       {\n\tnode_names = NODE_NAMES;\n}\n\n                                  \n                                              ",
			"import create from '.Object.create';\nimport assign from '.Object.assign';\nimport Error from '.Error';\n\nimport { scope_add } from './scope';\n\nconst isBigScope = (type        )          => type==='FunctionDeclaration' || type==='FunctionExpression' || type==='ArrowFunctionExpression' || type==='Program';\nconst isAnyScope = (type        )          => type==='BlockStatement' || isBigScope(type);\n\nfunction Pattern (node         , scope      )       {\n\tswitch ( node.type ) {\n\t\tcase 'Identifier':\n\t\t\tscope_add(scope, node);\n\t\t\tbreak;\n\t\tcase 'ObjectPattern': {\n\t\t\tconst { properties } = node;\n\t\t\tconst { length } = properties;\n\t\t\tfor ( let index         = 0; index<length; ++index ) {\n\t\t\t\tconst property = properties[index];\n\t\t\t\tPattern(property.value || property.argument, scope);\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tcase 'ArrayPattern': {\n\t\t\tconst { elements } = node;\n\t\t\tconst { length } = elements;\n\t\t\tfor ( let index         = 0; index<length; ++index ) {\n\t\t\t\tconst element = elements[index];\n\t\t\t\tif ( element ) { Pattern(element, scope); }\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tcase 'RestElement':\n\t\t\tPattern(node.argument, scope);\n\t\t\tbreak;\n\t\tcase 'AssignmentPattern':\n\t\t\tPattern(node.left, scope);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow Error(`Unrecognized pattern type: ${node.type}`);\n\t}\n}\n\nfunction Function (scope           )       {\n\tconst { params } = scope;\n\tconst { length } = params;\n\tfor ( let index         = 0; index<length; ++index ) {\n\t\tPattern(params[index], scope);\n\t}\n\tconst { id } = scope;\n\tif ( id ) { scope_add(scope, id); }\n}\n\nfunction Class (scope        )       {\n\tconst { id } = scope;\n\tif ( id ) { scope_add(scope, id); }\n}\n\nconst DECLARATION_VISITORS = {\n\t\n\tVariableDeclaration (node                     , parents        )       {\n\t\tconst isScope = node.kind==='var' ? isBigScope : isAnyScope;\n\t\tfor ( let index         = parents.length-1; index>=0; --index ) {\n\t\t\tconst parent = parents[index];\n\t\t\tif ( isScope(parent.type) ) {\n\t\t\t\tconst { declarations } = node;\n\t\t\t\tconst { length } = declarations;\n\t\t\t\tfor ( let index         = 0; index<length; ++index ) {\n\t\t\t\t\tPattern(declarations[index].id, parent);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t},\n\t\n\tFunctionDeclaration (node           , parents        )       {\n\t\tconst { id } = node;\n\t\tif ( id ) {\n\t\t\tfor ( let index         = parents.length-2; index>=0; --index ) {\n\t\t\t\tconst parent = parents[index];\n\t\t\t\tif ( isBigScope(parent.type) ) {\n\t\t\t\t\tscope_add(parent, id);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tFunction(node);\n\t},\n\tFunction,\n\t\n\tClassDeclaration (node        , parents        )       {\n\t\tconst { id } = node;\n\t\tif ( id ) {\n\t\t\tfor ( let index         = parents.length-2; index>=0; --index ) {\n\t\t\t\tconst parent = parents[index];\n\t\t\t\tif ( isAnyScope(parent.type) ) {\n\t\t\t\t\tscope_add(parent, id);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tClass(node);\n\t},\n\tClass,\n\t\n\tTryStatement ({ handler }              )       {\n\t\tif ( handler ) { Pattern(handler.param, handler); }\n\t},\n\t\n};\n\nexport default function DeclarationVisitors (ast      ) {\n\tfunction Import (node                  )       { scope_add(ast, node.local); }\n\treturn assign(create(null), DECLARATION_VISITORS, {\n\t\tImportSpecifier: Import,\n\t\tImportDefaultSpecifier: Import,\n\t\tImportNamespaceSpecifier: Import,\n\t});\n};\n\n                                  \n                                        \n                                            \n                                      \n                                                                \n                                                  \n                                                          ",
			"import create from '.Object.create';\nimport assign from '.Object.assign';\n\nimport { scope_has } from './scope';\n\nconst isFunction = ({ type }      )          => type==='FunctionExpression' || type==='FunctionDeclaration';\n\nexport default function ReferenceVisitors (globals                            ) {\n\t\n\tfunction Identifier (node            , parents        )       {\n\t\tconst { name } = node;\n\t\tconst { length } = parents;\n\t\tlet index         = 0;\n\t\tif ( name==='arguments' ) {\n\t\t\tfor ( ; index<length; ++index ) {\n\t\t\t\tconst parent = parents[index];\n\t\t\t\tif ( scope_has(parent, name) || isFunction(parent) ) { return; }\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tfor ( ; index<length; ++index ) {\n\t\t\t\tconst parent = parents[index];\n\t\t\t\tif ( scope_has(parent, name) ) { return; }\n\t\t\t}\n\t\t}\n\t\tglobals.add(node);\n\t}\n\t\n\treturn assign(create(null), {\n\t\tIdentifier,// Identifier (reference)\n\t\tVariablePattern: Identifier,// Identifier (definition)\n\t\tThisExpression (node                , parents        )       {\n\t\t\tif ( parents.some(isFunction) ) { return; }\n\t\t\tglobals.add(node);\n\t\t},\n\t});\n\t\n};\n\n                                  \n                                              \n                                                      ",
			"import version from './version?text';\n\nimport Map from '.Map';\nimport push from '.Array.prototype.push';\nimport apply from '.Reflect.apply';\n\nimport { scope_new, scope_old } from './scope';\nimport DeclarationVisitors from './DeclarationVisitors';\nimport ReferenceVisitors from './ReferenceVisitors';\n\nconst { ancestor, base } = require('acorn-walk');\nif ( !base.FieldDefinition ) {\n\tbase.FieldDefinition = function (node                 , state_parents              , _continue                                                             )       {\n\t\tif ( node.computed ) { _continue(node.key, state_parents, 'Expression'); }\n\t\tconst { value } = node;\n\t\tif ( value ) { _continue(value, state_parents, 'Expression'); }\n\t};\n}\n\nclass Globals extends Map                                            {\n\tadd (               node                             )       {\n\t\tconst name         = node.type==='ThisExpression' ? 'this' : node.name;\n\t\tconst nodes = this.get(name);\n\t\tif ( nodes ) { nodes.push(node); }\n\t\telse { this.set(name, [ node ]); }\n\t}\n\tnames (             )           {\n\t\treturn [ ...this.keys() ];\n\t}\n\tnodes (             ) {\n\t\tconst nodes                                    = [];\n\t\tfor ( const value of this.values() ) {\n\t\t\tapply(push, nodes, value);\n\t\t}\n\t\treturn nodes;\n\t}\n}\n\nfunction findGlobals (AST      )          {\n\tscope_new();\n\ttry {\n\t\tconst globals          = new Globals;\n\t\tancestor(AST, DeclarationVisitors(AST));\n\t\tancestor(AST, ReferenceVisitors(globals));\n\t\treturn globals;\n\t}\n\tfinally { scope_old(); }\n}\n\nimport Default from '.default';\nexport default Default(findGlobals, { version });\n\n                                  \n                                                        \n                                              \n                                                      "
		],
	"names":
		[],
	"mappings":
		"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"
}