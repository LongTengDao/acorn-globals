{
	"version":
		3,
	"file":
		"index.js",
	"sourceRoot":
		"../../src/",
	"sources":
		["version?text","Node.ts","DeclarationVisitors.ts","ReferenceVisitors.ts","find.ts","default.ts"],
	"sourcesContent":
		[
			"export default '1.0.0';",
			"import WeakMap from '.WeakMap';\nimport Error from '.Error';\nimport Set from '.Set';\n\nconst NODE_NAMES                             = new WeakMap;\nlet node_names                             = NODE_NAMES;\n\nexport function scope_new ()       {\n\tif ( node_names!==NODE_NAMES  ) { throw Error(`Can't start new finding before previous finding finished.`); }\n\tnode_names = new WeakMap;\n}\n\nexport function scope_add (node      , { name }      )       {\n\tlet names                          = node_names.get(node);\n\tif ( !names ) { node_names.set(node, names = new Set); }\n\tnames.add(name);\n}\n\nexport function scope_has (node      , name        )          {\n\tconst names                          = node_names.get(node);\n\treturn names ? names.has(name) : false;\n}\n\nexport function scope_old ()       {\n\tnode_names = NODE_NAMES;\n}\n\nexport var Node       ;\n                             \n\t\n\t            \n\t            \n\t            \n\t             \n\t           \n\t\n\t        \n\t          \n\t                  \n\t           \n\t           \n\t                    \n\t              \n\t\n\t              \n\t                           \n\t                  \n\t                    \n\t\n  \n",
			"import create from '.Object.create';\nimport assign from '.Object.assign';\nimport Error from '.Error';\n\nimport { scope_add, Node } from './Node';\n\nconst isBigScope = (type        )          => type==='FunctionDeclaration' || type==='FunctionExpression' || type==='ArrowFunctionExpression' || type==='Program';\nconst isAnyScope = (type        )          => type==='BlockStatement' || isBigScope(type);\n\nfunction Pattern (node      , parent      )       {\n\tswitch ( node.type ) {\n\t\tcase 'Identifier':\n\t\t\tscope_add(parent, node);\n\t\t\tbreak;\n\t\tcase 'ObjectPattern': {\n\t\t\tconst { properties }       = node;\n\t\t\tconst { length }         = properties;\n\t\t\tfor ( let index         = 0; index<length; ++index ) {\n\t\t\t\tconst property       = properties[index];\n\t\t\t\tPattern(property.value || property.argument, parent);\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tcase 'ArrayPattern': {\n\t\t\tconst { elements }       = node;\n\t\t\tconst { length }                    = elements;\n\t\t\tfor ( let index         = 0; index<length; ++index ) {\n\t\t\t\tconst element              = elements[index];\n\t\t\t\tif ( element ) { Pattern(element, parent); }\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tcase 'RestElement':\n\t\t\tPattern(node.argument, parent);\n\t\t\tbreak;\n\t\tcase 'AssignmentPattern':\n\t\t\tPattern(node.left, parent);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow Error(`Unrecognized pattern type: ${node.type}`);\n\t}\n}\n\nfunction Function (node      )       {\n\tconst { params }       = node;\n\tconst { length }         = params;\n\tfor ( let index         = 0; index<length; ++index ) {\n\t\tPattern(params[index], node);\n\t}\n\tconst { id }       = node;\n\tif ( id ) { scope_add(node, id); }\n}\n\nfunction Class (node      )       {\n\tconst { id }       = node;\n\tif ( id ) { scope_add(node, id); }\n}\n\nconst DECLARATION_VISITORS = {\n\t\n\tVariableDeclaration (node      , parents        )       {\n\t\tconst isScope = node.kind==='var' ? isBigScope : isAnyScope;\n\t\tfor ( let index         = parents.length-1; index>=0; --index ) {\n\t\t\tconst parent       = parents[index];\n\t\t\tif ( isScope(parent.type) ) {\n\t\t\t\tconst { declarations }       = node;\n\t\t\t\tconst { length }         = declarations;\n\t\t\t\tfor ( let index         = 0; index<length; ++index ) {\n\t\t\t\t\tPattern(declarations[index].id, parent);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t},\n\t\n\tFunctionDeclaration (node      , parents        )       {\n\t\tconst { id }       = node;\n\t\tif ( id ) {\n\t\t\tfor ( let index         = parents.length-2; index>=0; --index ) {\n\t\t\t\tconst parent       = parents[index];\n\t\t\t\tif ( isBigScope(parent.type) ) {\n\t\t\t\t\tscope_add(parent, id);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tFunction(node);\n\t},\n\tFunction,\n\t\n\tClassDeclaration (node      , parents        )       {\n\t\tconst { id }       = node;\n\t\tif ( id ) {\n\t\t\tfor ( let index         = parents.length-2; index>=0; --index ) {\n\t\t\t\tconst parent       = parents[index];\n\t\t\t\tif ( isAnyScope(parent.type) ) {\n\t\t\t\t\tscope_add(parent, id);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tClass(node);\n\t},\n\tClass,\n\t\n\tTryStatement ({ handler }      )       {\n\t\tif ( handler ) { scope_add(handler, handler.param); }\n\t},\n\t\n};\n\nexport default function DeclarationVisitors (ast      ) {\n\tfunction Import (node      )       { scope_add(ast, node.local); }\n\treturn assign(create(null), DECLARATION_VISITORS, {\n\t\tImportSpecifier: Import,\n\t\tImportDefaultSpecifier: Import,\n\t\tImportNamespaceSpecifier: Import,\n\t});\n};\n",
			"import create from '.Object.create';\nimport assign from '.Object.assign';\n\nimport { scope_has, Node } from './Node';\n\nconst isFunction = ({ type }      )          => type==='FunctionExpression' || type==='FunctionDeclaration';\n\nexport default function ReferenceVisitors (globals         ) {\n\t\n\tfunction Name (node      , parents        )       {\n\t\tconst { name }       = node;\n\t\tconst { length }         = parents;\n\t\tlet index         = 0;\n\t\tif ( name==='arguments' ) {\n\t\t\tfor ( ; index<length; ++index ) {\n\t\t\t\tconst parent       = parents[index];\n\t\t\t\tif ( scope_has(parent, name) || isFunction(parent) ) { return; }\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tfor ( ; index<length; ++index ) {\n\t\t\t\tconst parent       = parents[index];\n\t\t\t\tif ( scope_has(parent, name) ) { return; }\n\t\t\t}\n\t\t}\n\t\tglobals.add(node);\n\t}\n\t\n\treturn assign(create(null), {\n\t\tIdentifier: Name,\n\t\tVariablePattern: Name,\n\t\tThisExpression (node      , parents        )       {\n\t\t\tif ( parents.some(isFunction) ) { return; }\n\t\t\tglobals.add(node);\n\t\t},\n\t});\n\t\n};\n\n                                          ",
			"import Map from '.Map';\nimport push from '.Array.prototype.push';\n\nimport { scope_new, scope_old, Node } from './Node';\nimport DeclarationVisitors from './DeclarationVisitors';\nimport ReferenceVisitors from './ReferenceVisitors';\n\nconst { ancestor, base } = require('acorn-walk');\nif ( !base.FieldDefinition ) {\n\tbase.FieldDefinition = function (node     , st     , c     )       {\n\t\tif ( node.computed ) { c(node.key, st, 'Expression'); }\n\t\tconst { value }       = node;\n\t\tif ( value ) { c(value, st, 'Expression'); }\n\t};\n}\n\nclass Globals extends Map                 {\n\tadd (node      )       {\n\t\tconst name         = node.type==='ThisExpression' ? 'this' : node.name;\n\t\tconst nodes                     = this.get(name);\n\t\tif ( nodes ) { nodes.push(node); }\n\t\telse { this.set(name, [ node ]); }\n\t}\n\tnames ()           {\n\t\treturn [ ...this.keys() ];\n\t}\n\tnodes ()         {\n\t\tconst nodes         = [];\n\t\tfor ( const value of this.values() ) {\n\t\t\tpush.apply(nodes, value);\n\t\t}\n\t\treturn nodes;\n\t}\n}\n\nexport default function find (ast                )          {\n\tscope_new();\n\ttry {\n\t\tconst globals          = new Globals;\n\t\tancestor(ast, DeclarationVisitors(ast));\n\t\tancestor(ast, ReferenceVisitors(globals));\n\t\treturn globals;\n\t}\n\tfinally { scope_old(); }\n};\n",
			"import version from './version?text';\nimport find from './find';\nimport Default from '.default';\nexport default Default(find, {\n\tversion,\n\tfind,\n});"
		],
	"names":
		[],
	"mappings":
		"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"
}